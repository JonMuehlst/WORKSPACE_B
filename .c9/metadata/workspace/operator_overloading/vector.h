{"filter":false,"title":"vector.h","tooltip":"/operator_overloading/vector.h","undoManager":{"mark":3,"position":3,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":93,"column":6},"action":"insert","lines":["#ifndef VECTOR_H","#define VECTOR_H","","class vector {","    ","  friend class vectorTest;","    ","  private:","    double x, y, z;","    ","  public:","  ","    //--------------------------------------------","    //    ctors","    //--------------------------------------------","    vector();","    vector(double,double,double);","    //--------------------------------------------","    ","    ","    //--------------------------------------------","    //    Binary operators","    //--------------------------------------------","    const vector operator/ (const double);","    vector& operator= (const vector&);","    vector& operator+= (const vector&);","    vector& operator-= (const vector&);","    vector& operator*= (const double);","    bool operator== (const vector&);","    bool operator!= (const vector&);","    //--------------------------------------------","    ","    ","    //--------------------------------------------","    //    unary operators","    //--------------------------------------------","    vector operator++ (int);","    const vector operator-() const;","    double operator[] (const int);","    //--------------------------------------------","    // double operator[] (const vector& v);","    ","    ","    //--------------------------------------------","    //    Friend global binary operators","    //--------------------------------------------","    friend const vector operator+ (const vector&, const vector&);","    friend const vector operator+ (const vector&, const double);","    friend const vector operator+ (const double, const vector&);","    friend const vector operator- (const vector&, const vector&);","    friend const vector operator- (const vector&, const double);","    friend const vector operator- (const double, const vector&);","    friend const double operator* (const vector&, const vector&);","    friend const vector operator* (const vector&, const double);","    friend const vector operator* (const double, const vector&);","    //--------------------------------------------","    ","    ","    //--------------------------------------------","    //    Friend global io operators","    //--------------------------------------------","    friend std::ostream& operator<< (std::ostream&, const vector&);","    //--------------------------------------------","    ","    ","    //--------------------------------------------","    //          Friend tests","    //--------------------------------------------","    FRIEND_TEST(vector_test_case, plus);","    FRIEND_TEST(vector_test_case, rscalar_plus);","    FRIEND_TEST(vector_test_case, lscalar_plus);","    FRIEND_TEST(vector_test_case, minus);","    FRIEND_TEST(vector_test_case, rscalar_minus);","    FRIEND_TEST(vector_test_case, lscalar_minus);","    FRIEND_TEST(vector_test_case, unary_minus);","    FRIEND_TEST(vector_test_case, dot_product);","    FRIEND_TEST(vector_test_case, rscalar_multiplication);","    FRIEND_TEST(vector_test_case, lscalar_multiplication);","    FRIEND_TEST(vector_test_case, scalar_division);","    FRIEND_TEST(vector_test_case, assignment);","    FRIEND_TEST(vector_test_case, plus_assignment);","    FRIEND_TEST(vector_test_case, minus_assignment);","    FRIEND_TEST(vector_test_case, multiplication_assignment);","    FRIEND_TEST(vector_test_case, subscripting);","    FRIEND_TEST(vector_test_case, equality);","    FRIEND_TEST(vector_test_case, inequality);","    FRIEND_TEST(vector_test_case, increment);","    FRIEND_TEST(vector_test_case, output);","    //--------------------------------------------","    ","    ","};","","#endif"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":4},"end":{"row":65,"column":0},"action":"insert","lines":["",""]},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":65,"column":4},"end":{"row":70,"column":13},"action":"insert","lines":["    // מחלקת ","    // vector_test_case","    // ניגשת למשתנים פרטיים של מחלקת","    // vector","    // לכן צריך להגדיר את הבדיקות ","    // friend"]}]}],[{"group":"doc","deltas":[{"start":{"row":65,"column":4},"end":{"row":65,"column":8},"action":"remove","lines":["    "]}]}]]},"ace":{"folds":[],"scrolltop":1037,"scrollleft":0,"selection":{"start":{"row":65,"column":4},"end":{"row":65,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":446,"mode":"ace/mode/c_cpp"}},"timestamp":1417035878307,"hash":"dec79b92e37b0fa3433a8f80f46658590b6b0649"}